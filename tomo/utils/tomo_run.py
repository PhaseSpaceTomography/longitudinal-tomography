'''Module containing function for full Fortran
style tomographic reconstruction.

:Author(s): **Christoffer HjertÃ¸ Grindheim**
'''

import sys

# Tomo modules
from ..tracking import tracking as tracking
from ..tomography import tomography as tomography
from ..utils import data_treatment as dtreat
from ..utils import tomo_input as tomoin
from ..tracking import particles as pts

def run_file(file, reconstruct_profile=None, verbose=False):
    '''Function to perform full reconstruction based on the original
    algorithm.

    Parameters
    ----------    
    file: string
        Path to input file.
    reconstruct_profile: int, optional, default=None
        Profile to be reconstructed. If not provided, machine.filmstart
        will be reconstructed.
    verbose: boolean, optional, default=False
        If set to True, the output similar to the one generated by the
        original program will be printed to stdout.
    
    Returns
    -------
    Phase axis: ndarray
        1D array containing time axis of reconstructed phase space image.
    Energy axis: ndarray
        1D array containing energy axis of reconstructed phase space image.
    density: ndarray
        2D array containing the reconstructed phase space image.

    Example
    -------
    >>> import numpy as np
    >>> import matplotlib.pyplot as plt
    >>> import tomo.utils.run_tomo as tomorun
    >>>
    >>> filepath = '...my/favourite/input.dat'
    >>> tRange, ERange, density = tomorun.run_file(filepath) 
    >>>
    >>> vmin = np.min(density[density>0])
    >>> vmax = np.max(density)
    >>> plt.contourf(tRange*1E9, ERange/1E6, density.T,
                     levels=np.linspace(vmin, vmax, 50), cmap='Oranges')
    >>> plt.xlabel('dt (ns)')
    >>> plt.ylabel('dE (MeV)')
    >>> plt.show()
    '''
    with open(file, 'r') as file:
        raw_params, raw_data = tomoin._split_input(file.readlines())
    
    machine, frames = tomoin.txt_input_to_machine(raw_params)
    machine.values_at_turns()
    waterfall = frames.to_waterfall(raw_data)
    
    profiles = tomoin.raw_data_to_profiles(
                    waterfall, machine, frames.rebin, frames.sampling_time)
    profiles.calc_profilecharge()
    
    if profiles.machine.synch_part_x < 0:
        fit_info = dtreat.fit_synch_part_x(profiles)
        machine.load_fitted_synch_part_x_ftn(fit_info)
    
    if reconstruct_profile is None:
        reconstr_idx = machine.filmstart
    else:
        reconstr_idx = reconstruct_profile
    
    # Tracking...
    tracker = tracking.Tracking(machine)

    if verbose:
        tracker.enable_fortran_output(profiles.profile_charge)

    xp, yp = tracker.track(reconstr_idx)

    # Converting from physical coordinates ([rad], [eV])
    # to phase space coordinates.
    if not tracker.self_field_flag:
        xp, yp = pts.physical_to_coords(
                    xp, yp, machine, tracker.particles.xorigin,
                    tracker.particles.dEbin)
    
    # Filters out lost particles, transposes particle matrix,
    # casts to np.int32.
    xp, yp = pts.ready_for_tomography(xp, yp, machine.nbins)
    
    # Tomography!
    tomo = tomography.TomographyCpp(profiles.waterfall, xp, yp)
    _ = tomo.run(verbose=verbose)
    
    return dtreat.phase_space(tomo, machine, profile=reconstr_idx)
